// ==UserScript==
// @name         Webpage Summarizer (Sidebar)
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Summarize webpages using Amazon Bedrock with sidebar
// @author       Your Name
// @match        https://support.microsoft.com/*
 // @include        http*://*.b.com/*
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    // Variables for resize functionality
    let isResizing = false;
    let lastDownX = 0;
    let sidebarWidth = '300px';

    // Add CSS for loading spinner and text selection prevention
    const style = document.createElement('style');
    style.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .summary-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #4CAF50;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }
        .no-select {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
    `;
    document.head.appendChild(style);

    // Create sidebar container
    const sidebar = document.createElement('div');
    sidebar.style.cssText = `
        position: fixed;
        top: 0;
        right: 0;
        width: 300px;
        height: 100vh;
        background-color: white;
        box-shadow: -2px 0 5px rgba(0,0,0,0.2);
        z-index: 10000;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s ease;
        transform: translateX(270px);
        min-width: 200px;
        max-width: 800px;
        font-family: Arial, sans-serif;
    `;

    // Create resize handle
    const resizeHandle = document.createElement('div');
    resizeHandle.style.cssText = `
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        cursor: ew-resize;
        background-color: transparent;
    `;

    // Create toggle tab
    const toggleTab = document.createElement('div');
    toggleTab.style.cssText = `
        position: absolute;
        left: -30px;
        top: 50%;
        background-color: #4CAF50;
        color: white;
        padding: 10px;
        cursor: pointer;
        writing-mode: vertical-rl;
        text-orientation: mixed;
        border-radius: 5px 0 0 5px;
    `;
    toggleTab.textContent = 'Summary';

    // Create content container
    const contentContainer = document.createElement('div');
    contentContainer.style.cssText = `
        padding: 15px;
        overflow-y: auto;
        flex-grow: 1;
    `;
    contentContainer.innerHTML = '<h3 style="color: #2c3e50;">Page Summary</h3><p>Click "Summarize" to generate summary.</p>';

    // Create summarize button
    const summarizeButton = document.createElement('button');
    summarizeButton.style.cssText = `
        margin: 10px;
        padding: 8px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
    `;
    summarizeButton.textContent = 'Summarize';

    // Assemble sidebar
    sidebar.appendChild(resizeHandle);
    sidebar.appendChild(toggleTab);
    sidebar.appendChild(summarizeButton);
    sidebar.appendChild(contentContainer);
    document.body.appendChild(sidebar);

    // Resize functionality
    resizeHandle.addEventListener('mousedown', (e) => {
        isResizing = true;
        lastDownX = e.clientX;

        const overlay = document.createElement('div');
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10001;
            cursor: ew-resize;
        `;
        overlay.id = 'resize-overlay';
        document.body.appendChild(overlay);
        document.body.classList.add('no-select');
    });

    document.addEventListener('mousemove', (e) => {
        if (!isResizing) return;

        const width = parseInt(getComputedStyle(sidebar).width);
        const newWidth = width + (lastDownX - e.clientX);

        if (newWidth >= 200 && newWidth <= 800) {
            sidebar.style.width = `${newWidth}px`;
            sidebarWidth = `${newWidth}px`;
            lastDownX = e.clientX;
        }
    });

    document.addEventListener('mouseup', () => {
        if (isResizing) {
            isResizing = false;
            document.body.classList.remove('no-select');
            const overlay = document.getElementById('resize-overlay');
            if (overlay) overlay.remove();
        }
    });

    // Toggle sidebar functionality
    let isOpen = false;
    toggleTab.addEventListener('click', () => {
        isOpen = !isOpen;
        sidebar.style.transform = isOpen ? 'translateX(0)' : 'translateX(270px)';
    });

    // Summarize functionality
    summarizeButton.addEventListener('click', () => {
        contentContainer.innerHTML = `
            <h3 style="color: #2c3e50;">Generating Summary</h3>
            <div class="summary-spinner"></div>
            <p style="text-align: center; color: #666;">Please wait...</p>
        `;

        const content = document.body.innerText.substring(0, 8000);

        GM_xmlhttpRequest({
            method: 'POST',
            url: 'https://lkkkkkkk.execute-api.us-east-1.amazonaws.com/prod/',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            timeout: 30000,
            data: JSON.stringify({
                text: content
            }),
            onload: function(response) {
                try {
                    const result = JSON.parse(response.responseText);

                    if (result.errorMessage) {
                        contentContainer.innerHTML = `
                            <h3 style="color: #e74c3c;">Error</h3>
                            <p>API Error: ${result.errorMessage}</p>
                            <button onclick="location.reload()" style="margin-top:10px;padding:5px 10px;">Retry</button>
                        `;
                        return;
                    }

                    const body = typeof result.body === 'string' ? JSON.parse(result.body) : result.body;

                    if (body && body.summary) {
    const summary = body.summary;
    const timePrediction = body.time_prediction;
    const paragraphs = summary.split('. ').map(p => p.trim()).filter(p => p);

    contentContainer.innerHTML = `
        <h3 style="margin-top:0; color: #2c3e50;">Page Summary</h3>

        <div style="
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #4CAF50;
            margin-bottom: 15px;
        ">
            <div style="
                line-height: 1.6;
                color: #2c3e50;
                padding-right: 30px;
            ">
                ${paragraphs.map(p => `<p style="margin: 0.5em 0">${p}.</p>`).join('')}
            </div>
        </div>

        <div style="
            padding: 15px;
            background-color: #fff3e0;
            border-radius: 5px;
            border-left: 4px solid #ff9800;
            margin-bottom: 15px;
        ">
            <h4 style="margin-top:0; color: #2c3e50;">Estimated Resolution Time</h4>
            <div style="
                line-height: 1.6;
                color: #2c3e50;
                padding-right: 30px;
            ">${timePrediction}</div>
        </div>

        <button id="copyButton" style="
            padding: 5px 10px;
            background: #eee;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            margin-right: 10px;
        ">Copy All</button>

        <button id="newSummaryButton" style="
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        ">Generate New Summary</button>
    `;

    // Update copy functionality to include time prediction
    document.getElementById('copyButton').onclick = () => {
        const textToCopy = `Summary:\n${summary}\n\nEstimated Resolution Time:\n${timePrediction}`;
        navigator.clipboard.writeText(textToCopy);
        const btn = document.getElementById('copyButton');
        btn.textContent = 'Copied!';
        setTimeout(() => btn.textContent = 'Copy All', 2000);
    };
}
                    else if (body && body.error) {
                        contentContainer.innerHTML = `
                            <h3 style="color: #e74c3c;">Error</h3>
                            <p>${body.error}</p>
                            <button onclick="location.reload()" style="margin-top:10px;padding:5px 10px;">Retry</button>
                        `;
                    }
                } catch (error) {
                    console.error('Error parsing response:', error);
                    contentContainer.innerHTML = `
                        <h3 style="color: #e74c3c;">Error</h3>
                        <p>Failed to parse response</p>
                        <p>Error: ${error.message}</p>
                        <button onclick="location.reload()" style="margin-top:10px;padding:5px 10px;">Retry</button>
                    `;
                }
            },
            onerror: function(error) {
                contentContainer.innerHTML = `
                    <h3 style="color: #e74c3c;">Error</h3>
                    <p>Failed to get summary</p>
                    <p>Error: ${error.toString()}</p>
                    <button onclick="location.reload()" style="margin-top:10px;padding:5px 10px;">Retry</button>
                `;
            }
        });
    });

    // Add hover effects
    [summarizeButton, toggleTab].forEach(element => {
        element.addEventListener('mouseover', () => {
            element.style.opacity = '0.8';
        });
        element.addEventListener('mouseout', () => {
            element.style.opacity = '1';
        });
    });

    // Add hover effect for resize handle
    resizeHandle.addEventListener('mouseover', () => {
        resizeHandle.style.backgroundColor = '#4CAF50';
        resizeHandle.style.opacity = '0.5';
    });

    resizeHandle.addEventListener('mouseout', () => {
        resizeHandle.style.backgroundColor = 'transparent';
    });
})();
